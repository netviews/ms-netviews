#!/usr/bin/env python3

import argparse
import matplotlib.pyplot as plt
import statistics
import numpy as np
import os
import csv

#sample usgae:
# ./iperf3_to_csv -n ministanford_2_site_ifwd -f ministanford_2_site_ifwd_throughput_experiment_round/client_* -o ./ministanford_2_site_ifwd_throughput_experiment.csv

output = ''

def main():
    parser = argparse.ArgumentParser(
        description = 'Convert iperf3 to CSV')
    parser.add_argument('-f', '--file', nargs = '+', action = 'append', required = True,
        help = 'the result file(s) to parse for graphing')
    parser.add_argument('-n', '--name', type = str, required = True,
        action = 'append', help = 'the respective axis name of the corresponding result file')
    parser.add_argument('-o', '--output', type = str, required = True,
        help = 'output file path (e.g. "output.csv")')
    args = parser.parse_args()

    files = args.file#[os.path.join(os.getcwd(), file_path) for file_path in args.file]
    names = args.name
    
    global output
    output = args.output

    parse_iperf3(files, names)

def parse_iperf3(files, names):
    curr_group = 0
    curr_run = 0
    num_runs = 0
    csv_values = []

    for file_group in files:
        sender_values = []
        receiver_values = []
        curr_flow = 0
        for file_path in file_group:
            file = open(file_path, 'r')
            line = file.readline()
            curr_flow = 0
            num_runs = 0
            #sender_values = []
            #receiver_values = []
            while line:
                line = line.split()
                if line and line[-1] == 'sender':
                    num_runs += 1
                    if len(sender_values) <= curr_flow:
                        sender_values.append([])
                        sender_values[curr_flow].append(names[curr_group] + "_sender")
                    if line[7]=="Mbits/sec":
                        sender_values[curr_flow].append(float(line[6]))
                    elif line[7]=="Kbits/sec":
                        sender_values[curr_flow].append(round(float(line[6]) / 1000, 2))
                    elif line[7]=="bits/sec":
                        sender_values[curr_flow].append(round(float(line[6]) / (1000*1000), 2))
                elif line and line[-1] == 'receiver':
                    if len(receiver_values) <= curr_flow:
                        receiver_values.append([])
                        receiver_values[curr_flow].append(names[curr_group]+ "_receiver")
                    if line[7] == "Mbits/sec":
                        receiver_values[curr_flow].append(float(line[6]))
                    elif line[7] == "Kbits/sec":
                        receiver_values[curr_flow].append(round(float(line[6]) / 1000, 2))
                    elif line[7] == "bits/sec":
                        receiver_values[curr_flow].append(round(float(line[6]) / (1000*1000), 2))
                    curr_flow += 1
                line = file.readline()
            file.close()

        for i in range(curr_flow):
            csv_values.append(sender_values[i])
        for i in range(curr_flow):
            csv_values.append(receiver_values[i])

    print(csv_values)

    with open(output, 'w') as write_file:
        csv_writer = csv.writer(write_file, delimiter = ',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        #for row in csv_values:
        csv_writer.writerows(csv_values)
        #csv_writer.writerows(receiver_values)
    write_file.close()

'''def parse_iperf3(files, names):
    curr_file = 0
    csv_values = []
    
    #with open('outfile', 'wb') as write_file:
    #    csv_wrtier = csv.writer(write_file, delimiter = ',')
    if raw:
        for file_path in files:
            file = open(file_path, 'r')
            line = file.readline()
            latency_values = []
            #latency_values.append(names[curr_file])
            while line:
                line = line.split()
                #p 0 219 33009
                if line and line[0] == 'p' and line[1] == '0':
                    if line[3] == '33000':
                        if len(latency_values) > 0:
                            csv_values.append(latency_values)
                        latency_values = []
                        latency_values.append(names[curr_file])
                    latency_values.append(float(line[2]))
                line = file.readline()
            file.close()
            print(latency_values)
            csv_values.append(latency_values)
            curr_file += 1

        
    else:
        for file_path in files:
            file = open(file_path, 'r')
            line = file.readline()
            latency_values = []
            latency_values.append(names[curr_file])
            while line:
                line = line.split()
                if line and line[0] != 'Start:' and line[-1] != 'StDev':
                    #print(line)
                    latency_values.append(float(line[5]))
                line = file.readline()
            file.close()
            curr_file += 1

    print(csv_values)

    with open(output, 'w') as write_file:
        csv_writer = csv.writer(write_file, delimiter = ',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        #for row in csv_values:
        csv_writer.writerows(csv_values)
    write_file.close()
'''

if __name__ == '__main__':
    main()
