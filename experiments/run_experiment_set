#!/usr/bin/env python3
import argparse
import subprocess
import time
import os
import signal
import pexpect
import sys
from subprocess import DEVNULL

def main():
    parser = argparse.ArgumentParser(
        description = 'Run a set of NetViews experiments')
    parser.add_argument('-l', '--list_path', type = str, required = True, 
            help = 'path to the list of NetViews experiments (one per line, in format APP:COMMAND)')
    args = parser.parse_args()

    list_path = args.list_path

    # Kill ONOS.
    kill_onos = subprocess.Popen(['pkill', '-f', 'onos'])
    time.sleep(2)

    with open(list_path) as experiment_list:
        for experiment in experiment_list:
            experiment = experiment.split(':')
            print("Running experiment: \n")
            print(experiment)
            # Start the ONOS Server.
            #onos_root = os.environ['ONOS_ROOT']
            #onos = subprocess.Popen('bazel run onos-local -- clean debug &', cwd = '/home/dan/onos', preexec_fn = os.setsid, stdout = DEVNULL, stderr = DEVNULL, shell=True)
            #onos = subprocess.Popen('sudo su -c \"bazel run onos-local -- clean debug &\" -s /bin/sh dan', cwd = '/home/dan/onos', preexec_fn = os.setsid, stdout = DEVNULL, stderr = DEVNULL, shell=True)
            onos = subprocess.Popen('sudo su -c \"bazel run onos-local -- clean debug &\" -s /bin/sh dan', cwd = '/home/dan/onos', preexec_fn = os.setsid, stdout = DEVNULL, stderr = DEVNULL, shell=True)


            # Wait 5 minutes for ONOS rebuild and restart.
            print("Starting ONOS server...")
            countdown(1 * 60)
            
            # Start the desired ONOS application.
            onos_cli = pexpect.spawn("sudo su -c \"/home/dan/onos/tools/test/bin/onos localhost\" -s /bin/sh dan", encoding = 'utf-8')
            onos_cli.logfile = sys.stdout
            onos_cli.expect("dan@root > ")
            onos_cli.sendline("app activate org.onosproject.openflow")
            onos_cli.expect("dan@root > ")
            onos_cli.sendline("app activate " + experiment[0])
            onos_cli.expect("dan@root > ")
            onos_cli.sendline("logout")

            time.sleep(5)
            
            mininet_command = pexpect.spawn(experiment[1], encoding = 'utf-8')
            mininet_command.logfile = sys.stdout
            mininet_command.expect('mininet> ', timeout=None)
            mininet_command.sendline('exit')

            # Waiting for shutdown of Mininet.
            time.sleep(5)
            
            # Kill ONOS.
            kill_onos = subprocess.Popen(['pkill', '-f', 'onos'])
            time.sleep(1)
            os.killpg(os.getpgid(onos.pid), signal.SIGTERM)

def countdown(t):
    while t:
        mins, secs = divmod(t, 60)
        timer = '{:02d}:{:02d}'.format(mins, secs)
        print(timer, end="\r")
        time.sleep(1)
        t -= 1

if __name__ == '__main__':
    main()
